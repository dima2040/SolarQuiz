#!/usr/bin/env node

// –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ —Å–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ

import chalk from 'chalk';
import inquirer from 'inquirer';
import gradient from 'gradient-string';
import chalkAnimation from 'chalk-animation';
import { createSpinner } from 'nanospinner';

let playerName;
let playerScore = 0;
let totalScore = 10;

const sleep = (ms = 1000) => new Promise((r) => setTimeout(r, ms));

async function welcome() {
  const rainbowTitle = chalkAnimation.rainbow(
    '–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ —Å–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ\n'
  );

  await sleep();
  rainbowTitle.stop();

  console.log(`
    ${chalk.bgBlue('–ö–ê–ö –ò–ì–†–ê–¢–¨')}
    –ü–µ—Ä–≤—ã–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ ${chalk.bgRed('–∑–∞–∫—Ä—ã—Ç–∏—é')} –ø—Ä–æ–≥—Ä–∞–º–º—ã
    –¢–∞–∫ —á—Ç–æ –ø–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –æ—Ç–≤–µ—á–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ!
  `);
}

async function handleAnswer(isCorrect) {
  const spinner = createSpinner('–ü—Ä–æ–≤–µ—Ä—è—é –æ—Ç–≤–µ—Ç...').start();
  await sleep();

  if (isCorrect) {
    playerScore += 1;
    spinner.success({ text: `–û—Ç–ª–∏—á–Ω–æ ${playerName}. –≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç` });
    console.log(chalk.yellow(`–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${playerScore} / ${totalScore} üéâ\n`));
  } else {
    spinner.error({ text: `–û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π, —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–ª ${playerName}!` });
    console.log(
      chalk.bgRed(
        chalk.yellow(`–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ ${playerScore} –∏–∑ ${totalScore}`)
      )
    );
    process.exit(1);
  }
}

async function askName() {
  const answers = await inquirer.prompt({
    name: 'player_name',
    type: 'input',
    message: '–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?'
  });

  playerName = answers.player_name;
}

function winner() {
  console.clear();
  const data = `–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, ${playerName}!\n–Æ—Ä–∞ —Ç–æ–±–æ–π –±—ã –≥–æ—Ä–¥–∏–ª—Å—è!`
  console.log(gradient.pastel.multiline(data));
  process.exit(0);
}

async function question1() {
  const answers = await inquirer.prompt({
    name: 'question_1',
    type: 'list',
    message: '–ö–∞–∫–∞—è –ø–ª–∞–Ω–µ—Ç–∞ –±–ª–∏–∂–∞–π—à–∞—è –∫ –°–æ–ª–Ω—Ü—É?\n',
    choices: ['–ó–µ–º–ª—è', '–ú–µ—Ä–∫—É—Ä–∏–π', '–ù–µ–ø—Ç—É–Ω', '–í–µ–Ω–µ—Ä–∞'],
  });

  return handleAnswer(answers.question_1 === '–ú–µ—Ä–∫—É—Ä–∏–π');
}

async function question2() {
  const answers = await inquirer.prompt({
    name: 'question_2',
    type: 'list',
    message: '–ò–∑ —á–µ–≥–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–æ—Å—Ç–æ–∏—Ç –°–æ–ª–Ω—Ü–µ?\n',
      choices: ['–ñ–∏–¥–∫–∞—è –ª–∞–≤–∞', '–ì–∞–∑', '–°–∫–∞–ª–∞', '–†–∞—Å–ø–ª–∞–≤–ª–µ–Ω–Ω–æ–µ –∂–µ–ª–µ–∑–æ'],
  });
  return handleAnswer(answers.question_2 === '–ì–∞–∑');
}

async function question3() {
    const answers = await inquirer.prompt({
        name: 'question_3',
        type: 'list',
        message: `–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ—è—Å –∞—Å—Ç–µ—Ä–æ–∏–¥–æ–≤?\n`,
        choices: [
            '–ú–µ–∂–¥—É –ó–µ–º–ª–µ–π –∏ –í–µ–Ω–µ—Ä–æ–π',
            '–ú–µ–∂–¥—É –Æ–ø–∏—Ç–µ—Ä–æ–º –∏ –°–∞—Ç—É—Ä–Ω–æ–º',
            '–ú–µ–∂–¥—É –ú–∞—Ä—Å–æ–º –∏ –Æ–ø–∏—Ç–µ—Ä–æ–º',
            '–ú–µ–∂–¥—É –ó–µ–º–ª–µ–π –∏ –ú–∞—Ä—Å–æ–º'
        ],
    });
  return handleAnswer(answers.question_3 === '–ú–µ–∂–¥—É –ú–∞—Ä—Å–æ–º –∏ –Æ–ø–∏—Ç–µ—Ä–æ–º');
}

async function question4() {
  const answers = await inquirer.prompt({
    name: 'question_4',
    type: 'list',
    message: '–°–∫–æ–ª—å–∫–æ –ª—É–Ω —É –ú–∞—Ä—Å–∞?\n',
    choices: ['13', '2', '50', '1'],
  });
  return handleAnswer(answers.question_4 === '2');
}

async function question5() {
  const answers = await inquirer.prompt({
    name: 'question_5',
    type: 'list',
    message: '–°–∞–º—ã–π –±–æ–ª—å—à–æ–π –≤—É–ª–∫–∞–Ω –≤ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –û–ª–∏–º–ø. –ì–¥–µ –æ–Ω?\n',
      choices: ['–ú–∞—Ä—Å', '–ó–µ–º–ª—è', '–Æ–ø–∏—Ç–µ—Ä', '–í–µ–Ω–µ—Ä–∞'],
  });
  return handleAnswer(answers.question_5 === '–ú–∞—Ä—Å');
}

async function question6() {
    const answers = await inquirer.prompt({
      name: 'question_6',
      type: 'list',
      message: '–ß—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ –ª—É—á—à–µ –≤—Å–µ–≥–æ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –∞—Ç–º–æ—Å—Ñ–µ—Ä—É, –æ–∫—Ä—É–∂–∞—é—â—É—é –í–µ–Ω–µ—Ä—É?\n',
        choices: ['–•–æ–ª–æ–¥–Ω–∞—è –∏ —Å–Ω–µ–∂–Ω–∞—è', '–ì–æ—Ä—è—á–∞—è –∏ —è–¥–æ–≤–∏—Ç–∞—è', '–•–æ–ª–æ–¥–Ω–∞—è –∏ –≤–ª–∞–∂–Ω–∞—è', '–Ø—Ä–∫–∞—è –∏ —Ç–µ–ø–ª–∞—è']
    });
    return handleAnswer(answers.question_6 === '–ì–æ—Ä—è—á–∞—è –∏ —è–¥–æ–≤–∏—Ç–∞—è');
}
  
async function question7() {
    const answers = await inquirer.prompt({
      name: 'question_7',
      type: 'list',
      message: '–ò–∑ —á–µ–≥–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–æ—Å—Ç–æ—è—Ç –∫–æ–º–µ—Ç—ã?\n',
        choices: ['–ì—Ä—è–∑–Ω—ã–π –ª–µ–¥ –∏ –ø—ã–ª—å', '–Ø–¥–æ–≤–∏—Ç–∞—è –∂–∏–¥–∫–æ—Å—Ç—å', '–ì–æ—Ä—è—á–∏–π –∂–∏–¥–∫–∏–π –∫–∞–º–µ–Ω—å', '–†–∂–∞–≤—ã–π –º–µ—Ç–∞–ª–ª'],
    });
    return handleAnswer(answers.question_7 === '–ì—Ä—è–∑–Ω—ã–π –ª–µ–¥ –∏ –ø—ã–ª—å');
}
  
async function question8() {
    const answers = await inquirer.prompt({
      name: 'question_8',
      type: 'list',
      message: '–ö–∞–∫–∞—è –∏–∑ —ç—Ç–∏—Ö –ø–ª–∞–Ω–µ—Ç —Å–∞–º–∞—è –º–∞–ª–µ–Ω—å–∫–∞—è?\n',
        choices: ['–£—Ä–∞–Ω', '–ó–µ–º–ª—è', '–Æ–ø–∏—Ç–µ—Ä', '–ú–µ—Ä–∫—É—Ä–∏–π'],
    });
  
    return handleAnswer(answers.question_8 === '–ú–µ—Ä–∫—É—Ä–∏–π');
}
  
async function question9() {
    const answers = await inquirer.prompt({
      name: 'question_9',
      type: 'list',
      message: '–ß—Ç–æ —Ç–∞–∫–æ–µ –ë–æ–ª—å—à–æ–µ –∫—Ä–∞—Å–Ω–æ–µ –ø—è—Ç–Ω–æ –Ω–∞ –Æ–ø–∏—Ç–µ—Ä–µ?\n',
        choices: ['–ë—É—Ä—è', '–ö—Ä–∞—Ç–µ—Ä', '–û–∑–µ—Ä–æ', '–í—É–ª–∫–∞–Ω'],
    });
  
    return handleAnswer(answers.question_9 === '–ë—É—Ä—è');
}
  
async function question10() {
    const answers = await inquirer.prompt({
      name: 'question_10',
      type: 'list',
      message: '–ö –∫–∞–∫–æ–π –ø–ª–∞–Ω–µ—Ç–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç —Å–ø—É—Ç–Ω–∏–∫–∏ –û–±–µ—Ä–æ–Ω –∏ –¢–∏—Ç–∞–Ω–∏—è?\n',
        choices: ['–ó–µ–º–ª—è', '–£—Ä–∞–Ω', '–Æ–ø–∏—Ç–µ—Ä', '–í–µ–Ω–µ—Ä–∞'],
    });
  
    return handleAnswer(answers.question_10 === '–£—Ä–∞–Ω');
}

// Run it with top-level await
console.clear();
await welcome();
await askName();
await question1();
// await question2();
// await question3();
// await question4();
// await question5();
// await question6();
// await question7();
// await question8();
// await question9();
// await question10();
winner();